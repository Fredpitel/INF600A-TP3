#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'RPG-Simulator'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/RPG-Simulator` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/RPG-Simulator now"
  exit 64
end

include GLI::App

program_desc 'Simulateur de jeu de role.'

version RPGSimulator::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Permet de fournir une base de donnees autre que celle par defaut.'
default_value 'combatants.txt'
arg_name 'RPG-Simulator --depot=...'
flag [:d,:depot]

desc 'Cree un nouveau hero dans la base de donnees.'
arg_name 'creer_hero [--niveau= ] nom'
command :creer_hero do |c|

  c.desc 'Permet de specifier le niveau du hero a la creation'
  c.default_value '1'
  c.flag [:n, :niveau]
  
  c.action do |global_options,options,args|
    nom = args.shift
    niveau = options[:n]
    combatants = global_options[:combatants]

    hero = RPGSimulator.creer_hero(combatants, nom, niveau)  

    if hero.nil?
      STDERR.puts "Un hero avec ce nom existe deja."
      exit 1
    else
      combatants << hero
      puts "Hero cree"
    end
  end
end

desc 'Cree un nouveau monstre dans la base de donnees'
arg_name 'creer_monstre[--niveau= ] nom'
command :creer_monstre do |c|

  c.desc 'Permet de specifier le niveau du monstre a la creation'
  c.default_value '1'
  c.flag [:n, :niveau]
  
  c.action do |global_options,options,args|
    nom = args.shift
    niveau = options[:n]
    combatants = global_options[:combatants]

    monstre = RPGSimulator.creer_monstre(combatants, nom, niveau)  

    if monstre.nil?
      STDERR.puts "Un monstre avec ce nom existe deja."
      exit 1
    else
      combatants << monstre
      puts "Monstre cree"
    end
  end
end

desc 'Combat entre un hero et un monstre.'
arg_name 'combat [--avance] nom_hero nom_monstre'
command :combat do |c|
  
  c.desc 'Difficulte de combat avancee'
  c.switch [:a, :avance]

  c.action do |global_options,options,args|
    nom_hero = args.shift
    nom_monstre = args.shift
    avance = options[:a]
    combatants = global_options[:combatants]

    puts RPGSimulator.combat(combatants, nom_hero, nom_monstre, avance)
  end
end

desc 'Liste les informations des heros et des monstres.'
arg_name 'lister [--tous]'
command :lister do |c|
  c.action do |global_options,options,args|
    puts ""
  end
end

pre do |global,command,options,args|
  if File.exists? global[:d]
    global[:combatants] = []
    IO.readlines( global[:d] ).map do |ligne|
      global[:combatants] << CombatantTexte::creer_combatant(ligne)
    end
  end 

  File.exists? global[:depot]
end

post do |global,command,options,args|
  FileUtils.cp global[:depot], "#{global[:depot]}.bak"

  # On sauve les cours dans le fichier.
  #
  # Ici, on aurait aussi pu utiliser map plutot que each. Toutefois,
  # comme la collection resultante n'aurait pas ete utilisee,
  # puisqu'on execute la boucle uniquement pour son effet de bord
  # (ecriture dans le fichier), ce n'etait pas approprie.
  #
  if global[:combatants]
    File.open( global[:depot], "w" ) do |fich|
      global[:combatants].each do |c|
        CombatantTexte.sauver_combatant( fich, c )
      end
    end
  end
end

on_error do |exception|
  STDERR.puts "*** Exception signalee dans bin/Å–PG-Simulator !!"
  STDERR.puts "#{ exception.class }( #{ exception.message } )"
  STDERR.puts exception.backtrace
  false
end

exit run(ARGV)
